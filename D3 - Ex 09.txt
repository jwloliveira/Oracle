Vamos criar um cenário onde queremos manter um registro de transações bancárias e garantir que o saldo da conta seja atualizado de forma correta e segura. Para isso, vamos utilizar transações SQL com controle de concorrência.

CREATE TABLE Transacoes (
    ID INT PRIMARY KEY,
    ContaID INT,
    Valor DECIMAL(10, 2),
    TipoOperacao VARCHAR(10),
    DataTransacao DATE
);

--
CREATE TABLE SaldoConta (
    ContaID INT PRIMARY KEY,
    Saldo DECIMAL(10, 2)
);

--

INSERT INTO Transacoes (ID, ContaID, Valor, TipoOperacao, DataTransacao)
VALUES
(1, 1, 100.00, 'Deposito', TO_DATE('01/01/2023', 'DD/MM/YYYY')),
(2, 1, -50.00, 'Saque', TO_DATE('02/01/2023', 'DD/MM/YYYY')),
(3, 1, -30.00, 'Pagamento', TO_DATE('03/01/2023', 'DD/MM/YYYY')),
(4, 2, 500.00, 'Deposito', TO_DATE('01/01/2023', 'DD/MM/YYYY')),
(5, 2, -200.00, 'Saque', TO_DATE('02/01/2023', 'DD/MM/YYYY')),
(6, 2, -100.00, 'Pagamento', TO_DATE('03/01/2023', 'DD/MM/YYYY'));


--
-- vamos criar uma transação SQL para atualizar o saldo da conta de forma segura, garantindo que o saldo não fique negativo:

BEGIN
    DECLARE saldo_atual DECIMAL(10, 2);
    DECLARE novo_saldo DECIMAL(10, 2);
    
    SELECT Saldo INTO saldo_atual FROM SaldoConta WHERE ContaID = 1 FOR UPDATE;
    
    IF saldo_atual + 100.00 >= 0 THEN
        UPDATE SaldoConta SET Saldo = saldo_atual + 100.00 WHERE ContaID = 1;
        INSERT INTO Transacoes (ID, ContaID, Valor, TipoOperacao, DataTransacao)
        VALUES (7, 1, 100.00, 'Deposito', TO_DATE('04/01/2023', 'DD/MM/YYYY'));
        COMMIT;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Saldo insuficiente para a transacao');
    END IF;
END;
